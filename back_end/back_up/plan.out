public:
0. init function
1. get all info of a page and return the head_pointer of it
2. clear the buffer pool
3. announce that the use of the page is end (and maybe make it dirty)
solution:
0. fulfill each memory-page and connect them
1. 1) find if the page wanted exists. if it is, return it or wait until the mutex unlocked, renew its clock 
   and consider to make it hot
   if do not exists:
   2) try to get a page from the free list. if it has one, read info and move it to the LRU-old-head
   if do not exists:
   3) if not all pages need to be flushed, try to find a page from the tail of LRU-list and rewrite it,
        and move it to the LRU-old-head
   if all pages are dirty:
   4) flush some of them back to clean them and move them to the LRU_tail(if they are at LRU-old)
2. rewrite the flush list, clean three lists
3. 
private:
pick a page out of LRU-list(_pick_out_LRU())
0.init a page(buf_block_t()) done

1.1)find if the page wanted exists(_find()) done

    move a page to the LRU-old-head(consider that LRU-old can have nothing)(_to_LRU_old()) done

    move a page to the LRU-hot-head(young())done
1.2)    read_info and move it to the LRU-old-head(_read_inf())done

    get a page from the free list, read info and move it to the LRU-old-head(free_use())done
1.3)    get the oldest free page from the LRU-list(_LRU_oldest())done
            read_info and move it to the LRU-old-head
1.4)    flush a page

        move a page to the LRU-tail or LRU-young-tail;

make a page young